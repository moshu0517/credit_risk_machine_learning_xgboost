
#%%
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, roc_auc_score, classification_report
from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt

df = pd.read_csv("/Users/moshu/Desktop/Git-Project/Credit Risk Analysis/data/processed_data_initial.csv")
# %%
# --- Define features and target ---
# target column is "default payment next month"
X = df.drop(columns=["default payment next month"])
y = df["default payment next month"]

# --- Train-test split ---
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# ---  Train logistic regression ---
# Iâ€™ll keep it simple, use liblinear solver for small dataset
log_reg = LogisticRegression(max_iter=1000, solver="liblinear")
log_reg.fit(X_train, y_train)

# --- Evaluate baseline performance ---
y_pred = log_reg.predict(X_test)
y_proba = log_reg.predict_proba(X_test)[:, 1]  # probability of default

print("Accuracy:", accuracy_score(y_test, y_pred))
print("ROC-AUC:", roc_auc_score(y_test, y_proba))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# predict_proba gives probabilities, we take the probability of class 1 (default)
y_prob = log_reg.predict_proba(X_test)[:, 1]

fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = roc_auc_score(y_test, y_prob)

plt.figure(figsize=(6, 6))
plt.plot(fpr, tpr, color="darkorange", lw=2, label=f"ROC curve (AUC = {roc_auc:.2f})")
plt.plot([0, 1], [0, 1], color="navy", lw=2, linestyle="--")
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Receiver Operating Characteristic (ROC) Curve")
plt.legend(loc="lower right")
plt.savefig("/Users/moshu/Desktop/Git-Project/Credit Risk Analysis/reports/baseline_logistic_roc.png")
plt.show()

# --- Result Interpretation ---
# Accuracy: ~77.9% looks okay, but this is misleading because the dataset is imbalanced.
# ROC-AUC: ~0.64, which means the model is only slightly better than random guessing, which is 0.5.
# Class 0 (non-default): predicted very well, with high recall (almost all non-default detected).
# Class 1 (default): precision and recall are both 0, which means the model fails to capture defaults at all.
# Overall: logistic regression baseline is weak, and this motivates trying more powerful models (e.g., XGBoost).
# %%
